# -*- coding: utf-8 -*-
"""Task7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e9eZXdnWOkdz3DaV0Vk9sER0qyXZAYsO
"""

import sqlite3
import pandas as pd
import matplotlib.pyplot as plt

# --- 1. Setup: Create and Populate the SQLite Database ---
# This part creates the database and table, then adds data.
# In a real application, you might only connect to an existing database.

# Connect to the database (this will create 'sales_data.db' if it doesn't exist)
conn = sqlite3.connect('sales_data.db')
cursor = conn.cursor()

# Create the 'sales' table (IF NOT EXISTS prevents errors on re-runs)
cursor.execute('''
    CREATE TABLE IF NOT EXISTS sales (
        id INTEGER PRIMARY KEY,
        product TEXT NOT NULL,
        quantity INTEGER NOT NULL,
        price REAL NOT NULL
    )
''')

# Clear existing data to make the script re-runnable
cursor.execute('DELETE FROM sales')

# Insert some sample sales data
sample_data = [
    ('Laptop', 10, 1200.00),
    ('Mouse', 50, 25.50),
    ('Keyboard', 35, 75.00),
    ('Monitor', 20, 300.75),
    ('Laptop', 5, 1150.00), # Another laptop sale
    ('Mouse', 25, 24.00),   # Another mouse sale
]

cursor.executemany('INSERT INTO sales (product, quantity, price) VALUES (?, ?, ?)', sample_data)

# Commit changes and close the connection
conn.commit()
conn.close()
print(" Database 'sales_data.db' created and populated successfully.")

# --- 2. Analysis: Connect, Query, and Load Data ---

# Re-connect to the database to perform analysis
conn = sqlite3.connect('sales_data.db')

# Define the SQL query to get total quantity and revenue per product
query = """
    SELECT
        product,
        SUM(quantity) AS total_quantity,
        SUM(quantity * price) AS total_revenue
    FROM
        sales
    GROUP BY
        product
    ORDER BY
        total_revenue DESC;
"""

# Execute the query and load the results into a pandas DataFrame
sales_summary_df = pd.read_sql_query(query, conn)

# Close the connection as we have our data in the DataFrame now
conn.close()


# --- 3. Display Results ---

# Print the summarized data to the console
print("\n--- Sales Summary by Product ---")
print(sales_summary_df)

# Create a bar chart to visualize the revenue
print("\n Generating sales revenue chart...")
plt.figure(figsize=(10, 6)) # Set the figure size for better readability

sales_summary_df.plot(
    kind='bar',
    x='product',
    y='total_revenue',
    color='skyblue',
    legend=False, # We don't need a legend for a single series
    ax=plt.gca() # Use the current axes
)

# Add titles and labels for clarity
plt.title('Total Revenue by Product', fontsize=16)
plt.xlabel('Product', fontsize=12)
plt.ylabel('Total Revenue ($)', fontsize=12)
plt.xticks(rotation=45, ha='right') # Rotate x-axis labels for better fit
plt.tight_layout() # Adjust layout to prevent labels from overlapping

# Save the chart to a file
plt.savefig("sales_revenue_chart.png")
print("Chart saved as 'sales_revenue_chart.png'")


# Show the plot
plt.show()

